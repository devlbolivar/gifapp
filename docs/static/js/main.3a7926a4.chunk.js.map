{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","placeholder","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","gif","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","image","GifExpertApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,I,YCwBAA,ICZAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAoBO,OAC5CN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,YAAY,eACZC,SAtBc,SAACR,GACvBF,EAAcE,EAAES,OAAOH,a,QCLlBI,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAKA,Q,uBCNJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAECG,MAAMR,GAFP,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAYZY,GAZY,4CAAH,sDCMPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAErB,ECLwB,SAACA,GACzB,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNlB,EAAQC,GACP7B,MAAK,SAAA+C,GACFF,EAAS,CACLV,KAAMY,EACNJ,SAAS,SAGlB,CAACd,IAEGe,EDXyBI,CAAanB,GAAhCW,EAAb,EAAOL,KAAcQ,EAArB,EAAqBA,QAGrB,OACI,qCACI,6BAAKd,IACJc,GAAW,wCACZ,qBAAKlB,UAAU,YAAf,SAEQe,EAAOH,KAAI,SAAAY,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAMV,aEfzBW,EAAe,WAEzB,MAAoC1C,mBAAS,CAAC,UAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQS,EAAWqB,KAAI,SAACR,GAAD,OAAc,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCR/DsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1D,M","file":"static/js/main.3a7926a4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        \n        if(inputValue.trim().length > 2){\n            setCategories(categories => [ inputValue,...categories]);\n            setInputValue('');\n        }\n\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                placeholder=\"Add category\"\n                onChange={handleInputChange}\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{ title}</p>\n        </div>\n    )\n}\n","export const getGifs = async (category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=cYUpwPgZWImJ3k6jBeKAz0Qk7qITpoxb`;\n    const resp =  await fetch(url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map(gif => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            url: gif.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","//import React, { useState, useEffect } from 'react'\nimport React from 'react'\nimport { GifGridItem } from './GifGridItem';\n\nimport {useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n    \n    \n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>loading</p> }\n            <div className=\"card-grid\">\n                { \n                    images.map(image =>(\n                        <GifGridItem \n                            key={image.id} \n                            {...image} \n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n        .then(imgs => {\n            setState({ \n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category]);\n\n    return state; \n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport  const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['funny']);\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map((category) => <GifGrid key={category} category={category}/>)\n                }\n            </ol>\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}